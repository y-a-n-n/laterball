name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      # Also trigger on alpha tags for testing only:
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        run: ./gradlew assembleDist
      - name: Temporarily save build artefact
        uses: actions/upload-artifact@v2
        with:
         name: server-artifact
         path: build/distributions
         retention-days: 1

  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version: ${{ steps.step2.outputs.version }}
    # needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Downloade build artefact
        uses: actions/download-artifact@v2
        with:
          name: server-artifact
          path: build/distributions
          retention-days: 1
      - name: Build docker images
        run: |
          tag=$GITHUB_REF_NAME
          version="${tag#?}"
          echo "::set-output name=version::$version"
          ./scripts/builddocker.sh $version PROD

      - name: Create tarballs
        run: |
          mkdir -p ./build/docker
          docker save laterball/laterball-server > ./build/docker/laterball-server-$version.tar
          docker save laterball/mongo > ./build/docker/laterball-mongo-$version.tar
      - name: Temporarily save docker artefacts
        uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: build/docker
          retention-days: 1
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Download docker artefacts
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: build/docker
          retention-days: 1
      - name: Create .env.PROD file
        run: |
          cat <<EOF > .env.PROD
          KTOR_ENV=PROD
          MONGO_INITDB_ROOT_USERNAME=$MONGO_INITDB_ROOT_USERNAME
          MONGO_INITDB_ROOT_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
          RAPID_API_KEY=$RAPID_API_KEY
          MONGO_HOST=mongo
          CSRF_SECRET=$CSRF_SECRET
          COOKIE_DOMAIN=laterball.com
          BASE_URL=http://laterball.com
          EOF
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/production.key
          chmod 600 ~/.ssh/production.key
          cat >>~/.ssh/config <<END
          Host production
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/production.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
      - name: Copy artefacts to production
        run: |
          ssh $SSH_USER@$SSH_HOST "mkdir -p /usr/bin/laterball"
          scp ./docker-compose.PROD.yml .env.PROD ./nginx/laterball.PROD.conf ./build/docker/laterball-server-$VERSION.tar ./build/docker/laterball-mongo-$VERSION.tar $SSH_USER@$SSH_HOST:/usr/bin/laterball
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          VERSION: ${{needs.job1.outputs.version}}
      - name: Restart containers
        run: |
          ssh $SSH_USER@$SSH_HOST 'bash -s' < ./scripts/run.sh $VERSION PROD
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          VERSION: ${{needs.prepare.outputs.version}}
      - name: Wait for health
        uses: cygnetdigital/wait_for_response@v2.0.0
        with:
          url: https://laterball.com
          timeout: 60000
          interval: 5000
          responseCode: 200